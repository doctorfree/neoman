#!/bin/bash
#
# neoman - initialize configuration files, install needed utilities
#
# shellcheck disable=SC2001,SC2002,SC2016,SC2006,SC2059,SC2086,SC2089,SC2181,SC2129

darwin=
platform=$(uname -s)
if [ "${platform}" == "Darwin" ]; then
  TOP="/usr/local"
  darwin=1
else
  TOP="/usr"
fi
CONFDIR=${TOP}/share/neoman
USERCONF="${HOME}/.config"
LMANDIR="${USERCONF}/nvim-Lazyman"
NEOMANDIR="${USERCONF}/neoman"
INITIAL="${NEOMANDIR}/.initialized"
GHUC="https://raw.githubusercontent.com"
OWNER=doctorfree
BOLD=$(tput bold 2>/dev/null)
NORM=$(tput sgr0 2>/dev/null)

# Neovim 0.9+ honors this
# Override user's setting to install in standard location
export NVIM_APPNAME="nvim-Lazyman"

usage() {
  if [ "${have_rich}" ]; then
    rich "[bold]Usage:[/] [bold italic green]neoman[/] [cyan]\[-a] \[-c] \[-d] \[-m] \[-q] \[-r] \[-y] \[-u] \[-U] \[arg][/]" --print
    rich "[bold]Where:[/]" --print
    rich "    [cyan]-a[/] indicates [yellow] ask to play an animation when done[/]" --print
    rich "    [cyan]-c[/] indicates [yellow]console mode - no windowing system, headless config[/]" --print
    rich "    [cyan]-d[/] indicates [yellow]debug mode[/]" --print
    rich "    [cyan]-m[/] indicates [yellow]setup user NeoMutt configuration[/]" --print
    rich "    [cyan]-q[/] indicates [yellow]quiet mode[/]" --print
    rich "    [cyan]-r[/] indicates [yellow]remove service/package[/]" --print
    rich "    [cyan]-y[/] indicates [yellow]answer yes at all prompts[/]" --print
    rich "    [cyan]-u[/] indicates [yellow]display this usage message and exit[/]" --print
    rich "    [cyan]-U[/] indicates [yellow]update Neoman and exit[/]" --print
    rich "    If [cyan]arg[/] is [cyan]brew[/] [yellow]Homebrew is installed and used[/]" --print
    rich "    [cyan]arg[/] can also be one of [cyan]games[/], [cyan]kitty[/], [cyan]neovim[/]," --print
    rich "        [cyan]btop[/], [cyan]newsboat[/], [cyan]w3m[/], or [cyan]neofetch[/]" --print
    rich "        indicating [yellow]installation or removal[/] of [cyan]arg[/]" --print
    printf "\n"
  else
    printf "\nUsage: neoman [-a] [-c] [-d] [-m] [-q] [-r] [-y] [-u] [-U] [arg]"
    printf "\nWhere:"
    printf "\n\t-a indicates ask to play an animation when done"
    printf "\n\t-c indicates console mode - no windowing system, headless config"
    printf "\n\t-d indicates debug mode"
    printf "\n\t-m indicates setup user NeoMutt configuration"
    printf "\n\t-q indicates quiet mode"
    printf "\n\t-r indicates remove service/package"
    printf "\n\t-y indicates answer yes at all prompts"
    printf "\n\t-u indicates display this usage message and exit"
    printf "\n\t-U indicates update Neoman and exit"
    printf "\n\tif 'arg' is 'brew' Homebrew is installed and used"
    printf "\n\targ can also be one of games, kitty, neovim"
    printf "\n\t\tbtop, newsboat, w3m, or neofetch"
    printf "\n\t\tindicating installation of removal of arg\n"
  fi
  exit 1
}

# Compare two version strings [$1: version string 1 (v1), $2: version string 2 (v2)]
# Return values:
#   0: v1 == v2
#   1: v1 > v2
#   2: v1 < v2
# Based on https://stackoverflow.com/a/4025065 by Dennis Williamson
# and https://stackoverflow.com/questions/4023830/how-to-compare-two-strings-in-dot-separated-version-format-in-bash/49351294#49351294 by Github user @fonic
compare_versions() {
  # Trivial v1 == v2 test based on string comparison
  [[ "$1" == "$2" ]] && return 0

  # Local variables
  local regex="^(.*)-r([0-9]*)$" va1=() vr1=0 va2=() vr2=0 len i IFS="."

  # Split version strings into arrays, extract trailing revisions
  if [[ "$1" =~ ${regex} ]]; then
    va1=("${BASH_REMATCH[1]}")
    [[ -n "${BASH_REMATCH[2]}" ]] && vr1=${BASH_REMATCH[2]}
  else
    va1=("$1")
  fi
  if [[ "$2" =~ ${regex} ]]; then
    va2=("${BASH_REMATCH[1]}")
    [[ -n "${BASH_REMATCH[2]}" ]] && vr2=${BASH_REMATCH[2]}
  else
    va2=("$2")
  fi

  # Bring va1 and va2 to same length by filling empty fields with zeros
  ((${#va1[@]} > ${#va2[@]})) && len=${#va1[@]} || len=${#va2[@]}
  for ((i = 0; i < len; ++i)); do
    [[ -z "${va1[i]}" ]] && va1[i]="0"
    [[ -z "${va2[i]}" ]] && va2[i]="0"
  done

  # Append revisions, increment length
  va1+=("$vr1")
  va2+=("$vr2")
  len=$((len + 1))

  # Compare version elements, check if v1 > v2 or v1 < v2
  for ((i = 0; i < len; ++i)); do
    if ((10#${va1[i]} > 10#${va2[i]})); then
      return 1
    elif ((10#${va1[i]} < 10#${va2[i]})); then
      return 2
    fi
  done

  # All elements are equal, thus v1 == v2
  return 0
}


remove_package() {
  PKG="$1"
  [ "${quiet}" ] || printf "\n\tRemoving %s ..." "${PKG}"
  # Try Brew first
  have_brew=$(type -p brew)
  [ "${have_brew}" ] || usebrew=
  if [ "${usebrew}" ]; then
    if [ "${tellme}" ]
    then
      echo "brew uninstall -q ${PKG}"
    else
      brew uninstall -q ${PKG} >/dev/null 2>&1
    fi
  else
    if [ "${debian}" ]; then
      if [ "${APT}" ]; then
        if [ "${tellme}" ]
        then
          echo "sudo ${APT} remove ${PKG}"
        else
          sudo ${APT} remove ${PKG} >/dev/null 2>&1
        fi
      else
        [ "${quiet}" ] || printf "\n\t\tCannot locate apt to remove. Skipping ..."
      fi
    else
      if [ "${fedora}" ]; then
        if [ "${DNF}" ]; then
          if [ "${tellme}" ]
          then
            echo "sudo ${DNF} remove ${PKG}"
          else
            sudo ${DNF} remove ${PKG} >/dev/null 2>&1
          fi
        else
          [ "${quiet}" ] || printf "\n\t\tCannot locate dnf to remove. Skipping ..."
        fi
      else
        [ "${arch}" ] && {
          if [ "${tellme}" ]
          then
            echo "sudo pacman -R --noconfirm ${PKG}"
          else
            sudo pacman -R --noconfirm ${PKG} >/dev/null 2>&1
          fi
        }
      fi
    fi
  fi
  [ "${quiet}" ] || printf " done"
}

install_package() {
  PKG="$1"
  [ "${quiet}" ] || printf "\n\tInstalling %s ..." "${PKG}"
  # Try Brew first
  brewed=
  [ "${usebrew}" ] && {
    brew search -q /^${PKG}$/ >/dev/null 2>&1
    [ $? -eq 0 ] && {
      if [ "${tellme}" ]
      then
        echo "brew install --quiet ${PKG}"
      else
        brew install --quiet ${PKG} >/dev/null 2>&1
        [ $? -eq 0 ] || brew link --overwrite --quiet ${PKG} >/dev/null 2>&1
      fi
      brewed=1
    }
  }
  [ "${brewed}" ] || {
    if [ "${debian}" ]; then
      if [ "${APT}" ]; then
        if [ "${tellme}" ]
        then
          echo "sudo ${APT} install ${PKG}"
        else
          sudo ${APT} install ${PKG} >/dev/null 2>&1
        fi
      else
        [ "${quiet}" ] || printf "\n\t\tCannot locate apt to install. Skipping ..."
      fi
    else
      if [ "${fedora}" ]; then
        if [ "${DNF}" ]; then
          if [ "${tellme}" ]
          then
            echo "sudo ${DNF} install ${PKG}"
          else
            sudo ${DNF} install ${PKG} >/dev/null 2>&1
          fi
        else
          [ "${quiet}" ] || printf "\n\t\tCannot locate dnf to install. Skipping ..."
        fi
      else
        [ "${arch}" ] && {
          if [ "${tellme}" ]
          then
            echo "sudo pacman -S --noconfirm ${PKG}"
          else
            sudo pacman -S --noconfirm ${PKG} >/dev/null 2>&1
          fi
        }
      fi
    fi
  }
  [ "${quiet}" ] || printf " done"
}

install_pipx() {
  [ "${quiet}" ] || {
    printf "\n\tInstalling pipx ..."
  }
  if [ "${tellme}" ]
  then
    echo "${PYTHON} -m pip install --user pipx"
    echo "${PYTHON} -m pipx ensurepath --force"
  else
    ${PYTHON} -m pip install --user pipx >/dev/null 2>&1
    ${PYTHON} -m pipx ensurepath --force >/dev/null 2>&1
  fi
  [ "${quiet}" ] || {
    printf " done"
  }
}

install_external_package() {
  API_URL="https://api.github.com/repos/${OWNER}/${PROJECT}/releases/latest"
  DL_URL=
  [ "${have_curl}" ] && [ "${have_jq}" ] && {
    if [ "${darwin}" ]; then
      DL_URL=$(curl --silent "${API_URL}" \
          | jq --raw-output '.assets | .[]?.browser_download_url' \
        | grep "\.Darwin\.tgz")
    else
      if [ "${arch}" ]; then
        DL_URL=$(curl --silent "${API_URL}" \
            | jq --raw-output '.assets | .[]?.browser_download_url' \
          | grep "\.pkg\.tar\.zst")
      else
        if [ "${centos}" ] || [ "${fedora}" ]; then
          DL_URL=$(curl --silent "${API_URL}" \
              | jq --raw-output '.assets | .[]?.browser_download_url' \
            | grep "x86_64\.rpm")
        else
          if [ "${debian}" ]; then
            if [ "${mach}" == "x86_64" ]; then
              DL_URL=$(curl --silent "${API_URL}" \
                  | jq --raw-output '.assets | .[]?.browser_download_url' \
                | grep "\.amd64\.deb")
            else
              DL_URL=$(curl --silent "${API_URL}" \
                  | jq --raw-output '.assets | .[]?.browser_download_url' \
                | grep "\.arm.*\.deb")
            fi
          else
            printf "\n\tNo %s release asset found for this platform ..." "${PROJECT}"
          fi
        fi
      fi
    fi
  }

  [ "${DL_URL}" ] && {
    [ "${quiet}" ] || {
      printf "\n\tInstalling %s ..." "${PROJECT}"
    }
    if [ "${debian}" ]; then
      [ "${have_wget}" ] && {
        TEMP_DEB="$(mktemp --suffix=.deb)"
        if [ "${tellme}" ]
        then
          echo "wget --quiet -O ${TEMP_DEB} ${DL_URL}"
          echo "chmod 644 ${TEMP_DEB}"
          [ "${APT}" ] && echo "sudo ${APT} install ${TEMP_DEB}"
        else
          wget --quiet -O "${TEMP_DEB}" "${DL_URL}" >/dev/null 2>&1
          chmod 644 "${TEMP_DEB}"
          [ "${APT}" ] && sudo ${APT} install "${TEMP_DEB}" >/dev/null 2>&1
        fi
        rm -f "${TEMP_DEB}"
      }
    else
      if [ "${centos}" ] || [ "${fedora}" ]; then
        [ "${DNF}" ] && {
          if [ "${tellme}" ]
          then
            echo "sudo ${DNF} install ${DL_URL}"
          else
            sudo ${DNF} install ${DL_URL} >/dev/null 2>&1
          fi
        }
      else
        # Until we sign Arch packages we need to download and install locally
        if [ "${arch}" ]; then
          [ "${have_wget}" ] && {
            TEMP_ARCH="$(mktemp --suffix=.zst)"
            if [ "${tellme}" ]
            then
              echo "wget --quiet -O ${TEMP_ARCH} ${DL_URL}"
              echo "chmod 644 ${TEMP_ARCH}"
              echo "sudo pacman -U --noconfirm ${TEMP_ARCH}"
            else
              wget --quiet -O "${TEMP_ARCH}" "${DL_URL}" >/dev/null 2>&1
              chmod 644 "${TEMP_ARCH}"
              sudo pacman -U --noconfirm "${TEMP_ARCH}" >/dev/null 2>&1
            fi
            rm -f "${TEMP_ARCH}"
          }
        else
          [ "${darwin}" ] && {
            [ "${have_wget}" ] && {
              TEMP_ARCH="$(mktemp --suffix=.tgz)"
              if [ "${tellme}" ]
              then
                echo "wget --quiet -O ${TEMP_ARCH} ${DL_URL}"
                echo "chmod 644 ${TEMP_ARCH}"
                echo "tar xzf ${TEMP_ARCH} -C /"
              else
                wget --quiet -O "${TEMP_ARCH}" "${DL_URL}" >/dev/null 2>&1
                chmod 644 "${TEMP_ARCH}"
                tar xzf "${TEMP_ARCH}" -C /
              fi
              rm -f "${TEMP_ARCH}"
            }
          }
        fi
      fi
    fi
    [ "${quiet}" ] || {
      printf " done"
    }
  }
}

install_kitty() {
  have_stow=$(type -p stow)
  if [ "${have_stow}" ]; then
    LOCAL=".local/stow/kitty.app"
  else
    LOCAL=".local/kitty.app"
  fi
  [ "${have_kitty}" ] || {
    [ "${quiet}" ] || {
      printf "\n\tInstalling Kitty terminal emulator ..."
    }
    curl --silent --location \
      https://sw.kovidgoyal.net/kitty/installer.sh >/tmp/kitty-$$.sh
    [ $? -eq 0 ] || {
      rm -f /tmp/kitty-$$.sh
      curl --insecure --silent --location \
        https://sw.kovidgoyal.net/kitty/installer.sh >/tmp/kitty-$$.sh
      cat /tmp/kitty-$$.sh | sed -e "s/curl -/curl -k/" >/tmp/k$$
      cp /tmp/k$$ /tmp/kitty-$$.sh
      rm -f /tmp/k$$
    }
    if [ -s /tmp/kitty-$$.sh ]; then
      if [ "${have_stow}" ]; then
        sh /tmp/kitty-$$.sh launch=n dest=~/.local/stow >/dev/null 2>&1
        [ -d "${HOME}"/.local/stow ] && {
          cd "${HOME}"/.local/stow || echo "Unable to stow kitty.app"
          stow kitty.app
        }
      else
        sh /tmp/kitty-$$.sh launch=n >/dev/null 2>&1
      fi
      rm -f /tmp/kitty-$$.sh
      # Create a symbolic link to add kitty to PATH
      [ -d ~/.local/bin ] || mkdir -p ~/.local/bin
      if [ -x ~/${LOCAL}/bin/kitty ]; then
        [ -x ~/.local/bin/kitty ] || {
          ln -s ~/${LOCAL}/bin/kitty ~/.local/bin/
        }
      else
        if [ -x /Applications/kitty.app/Contents/MacOS/kitty ]; then
          [ -x ~/.local/bin/kitty ] || {
            ln -s /Applications/kitty.app/Contents/MacOS/kitty ~/.local/bin/
          }
        else
          [ "${quiet}" ] || printf "\nUnable to create Kitty link to ~/.local/bin/\n"
        fi
      fi
      # Link the kitty man pages somewhere it can be found by the man command
      LINMAN="${HOME}/${LOCAL}/share/man"
      MACMAN="/Applications/kitty.app/Contents/Resources/man"
      [ -d ~/.local/share/man/man1 ] || mkdir -p ~/.local/share/man/man1
      [ -f ~/.local/share/man/man1/kitty.1 ] || {
        [ -d ${HOME}/.local/share/man/man1 ] || {
          mkdir -p ${HOME}/.local/share/man/man1
        }
        if [ -f "${LINMAN}/man1/kitty.1" ]; then
          ln -s "${LINMAN}/man1/kitty.1" ~/.local/share/man/man1/
        else
          [ -f "${MACMAN}/man1/kitty.1" ] && {
            ln -s "${MACMAN}/man1/kitty.1" ~/.local/share/man/man1/
          }
        fi
      }
      [ -d ~/.local/share/man/man5 ] || mkdir -p ~/.local/share/man/man5
      [ -f ~/.local/share/man/man5/kitty.conf.5 ] || {
        [ -d ${HOME}/.local/share/man/man5 ] || {
          mkdir -p ${HOME}/.local/share/man/man5
        }
        if [ -f "${LINMAN}/man5/kitty.conf.5" ]; then
          ln -s "${LINMAN}/man5/kitty.conf.5" ~/.local/share/man/man5/
        else
          [ -f "${MACMAN}/man5/kitty.conf.5" ] && {
            ln -s "${MACMAN}/man5/kitty.conf.5" ~/.local/share/man/man5/
          }
        fi
      }
      # Place the kitty.desktop file somewhere it can be found by the OS
      [ -d ~/.local/share/applications ] || mkdir -p ~/.local/share/applications
      [ -f "${HOME}/${LOCAL}/share/applications/kitty.desktop" ] && {
        [ -f ~/.local/share/applications/kitty.desktop ] || {
          cp ~/${LOCAL}/share/applications/kitty.desktop \
            ~/.local/share/applications/
        }
      }
      # If you want to open text files and images in kitty via your file manager
      # also add the kitty-open.desktop file
      [ -f "${HOME}/${LOCAL}/share/applications/kitty-open.desktop" ] && {
        [ -f ~/.local/share/applications/kitty-open.desktop ] || {
          cp ~/${LOCAL}/share/applications/kitty-open.desktop \
            ~/.local/share/applications/
        }
      }
      # Update the paths to the kitty and its icon in the kitty.desktop file(s)
      for desktop in "${HOME}"/.local/share/applications/kitty*.desktop; do
        [ "${desktop}" == "${HOME}/.local/share/applications/kitty*.desktop" ] && continue
        [ -f /home/${MPP_USER}/${LOCAL}/share/icons/hicolor/256x256/apps/kitty.png ] && {
          sed -i "s|Icon=kitty|Icon=/home/${MPP_USER}/${LOCAL}/share/icons/hicolor/256x256/apps/kitty.png|g" "${desktop}"
        }
        [ -x /home/${MPP_USER}/${LOCAL}/bin/kitty ] && {
          sed -i "s|Exec=kitty|Exec=/home/${MPP_USER}/${LOCAL}/bin/kitty|g" "${desktop}"
        }
      done
      [ "${quiet}" ] || printf " done!\n"
    else
      printf "\n${BOLD}ERROR:${NORM} Download of kitty installation script failed"
      printf "\nSee https://sw.kovidgoyal.net/kitty/binary/#manually-installing"
      printf "\nto manually install the kitty terminal emulator\n"
    fi
    have_kitty=$(type -p kitty)
  }
  # Install the Kitty terminfo entry
  KITERM="${HOME}/.terminfo/x/xterm-kitty"
  MATERM="${HOME}/.terminfo/78/xterm-kitty"
  MACAPP="/Applications/kitty.app/Contents/Resources/kitty/terminfo"
  [ -f "${KITERM}" ] || [ -f "${MATERM}" ] || {
    [ -d ${HOME}/.terminfo ] || mkdir -p ${HOME}/.terminfo
    [ -d ${HOME}/.terminfo/x ] || mkdir -p ${HOME}/.terminfo/x
    [ -d ${HOME}/.terminfo/78 ] || mkdir -p ${HOME}/.terminfo/78
    have_tic=$(type -p tic)
    [ "${have_tic}" ] && {
      if [ -f "${HOME}/${LOCAL}/lib/kitty/terminfo/kitty.terminfo" ]; then
        tic -x -o ${HOME}/.terminfo \
          "${HOME}/${LOCAL}/lib/kitty/terminfo/kitty.terminfo" >/dev/null 2>&1
      else
        [ -f "${MACAPP}/kitty.terminfo" ] && {
          tic -x -o ${HOME}/.terminfo \
            "${MACAPP}/kitty.terminfo" >/dev/null 2>&1
        }
      fi
    }
    [ -f "${KITERM}" ] || [ -f "${MATERM}" ] || {
      if [ -f "${HOME}/${LOCAL}/lib/kitty/terminfo/x/xterm-kitty" ]; then
        cp "${HOME}/${LOCAL}/lib/kitty/terminfo/x/xterm-kitty" "${KITERM}"
      else
        if [ -f "${HOME}/${LOCAL}/share/terminfo/x/xterm-kitty" ]; then
          cp "${HOME}/${LOCAL}/share/terminfo/x/xterm-kitty" "${KITERM}"
        else
          if [ -f "${MACAPP}/78/xterm-kitty" ]; then
            cp "${MACAPP}/78/xterm-kitty" "${MATERM}"
          else
            [ "${quiet}" ] || printf "\nUnable to create Kitty terminfo entry ${KITERM}\n"
          fi
        fi
      fi
    }
  }
}

remove_kitty() {
  if [ "${tellme}" ]
  then
    echo "rm -rf ~/.local/kitty.app"
    echo "rm -f ~/.local/bin/kitty"
    echo "rm -f ~/.local/share/applications/kitty.desktop"
    echo "rm -f ~/.local/share/applications/kitty-open.desktop"
    echo "rm -f ~/.local/share/man/man1/kitty.1"
    echo "rm -f ~/.local/share/man/man5/kitty.conf.5"
    [ -d /Applications/kitty.app ] && echo "sudo rm -rf /Applications/kitty.app"
  else
    rm -rf ~/.local/kitty.app
    rm -f ~/.local/bin/kitty
    rm -f ~/.local/share/applications/kitty.desktop
    rm -f ~/.local/share/applications/kitty-open.desktop
    rm -f ~/.local/share/man/man1/kitty.1
    rm -f ~/.local/share/man/man5/kitty.conf.5
    [ -d /Applications/kitty.app ] && sudo rm -rf /Applications/kitty.app
  fi
}

remove_neovim() {
  have_brew=$(type -p brew)
  if [ "${have_brew}" ]; then
    brew uninstall -q neovim >/dev/null 2>&1
  else
    printf "\nCannot locate brew. Skipping Neovim removal."
  fi
}

install_neovim() {
  if [ "${usebrew}" ]; then
    install_args="-h -q -Q -y -z"
  else
    install_args="-q -Q -y -z"
  fi
  [ "${debug}" ] && install_args="${install_args} -d"
  if [ -x ${LMANDIR}/lazyman.sh ]; then
    ${LMANDIR}/lazyman.sh -I ${install_args}
    [ -f "${INITIAL}" ] && {
      echo "__install_neovim__=1" >>"${INITIAL}"
    }
  else
    [ -x ${NEOMANDIR}/scripts/lazyman.sh ] && {
      ${NEOMANDIR}/scripts/lazyman.sh ${install_args}
      [ -f "${INITIAL}" ] && {
        echo "__install_neovim__=1" >>"${INITIAL}"
      }
    }
  fi
  have_neovim=$(type -p nvim)
}

pathadd() {
  if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
    export PATH="$1${PATH:+":$PATH"}"
  fi
}

pathadd "/usr/local/bin"
pathadd "${HOME}/.local/bin"

# Clear the Bash cache so we know for sure if something is installed
hash -r

have_go=$(type -p go)
[ "${have_go}" ] || {
  [ -x /usr/local/go/bin/go ] && {
    pathadd "/usr/local/go/bin"
    have_go=$(type -p go)
  }
}

have_mutt=$(type -p mutt)
have_neomutt=$(type -p neomutt)
have_neovim=$(type -p nvim)
have_rich=$(type -p rich)
have_apt=$(type -p apt)
have_aptget=$(type -p apt-get)
have_dnf=$(type -p dnf)
have_yum=$(type -p yum)

arch=
debian=
fedora=
mach=$(uname -m)
APT=
DNF=

case "${mach}" in
  arm*)
    VOPT=
    ;;
  *)
    VOPT="--install-option='--with-audio'"
    ;;
esac

if [ "$platform" == "Darwin" ]; then
  darwin=1
else
  if [ -f /etc/os-release ]; then
    . /etc/os-release
    [ "${ID}" == "debian" ] || [ "${ID_LIKE}" == "debian" ] && debian=1
    [ "${ID}" == "arch" ] || [ "${ID_LIKE}" == "arch" ] && arch=1
    [ "${ID}" == "fedora" ] && fedora=1
    [ "${arch}" ] || [ "${debian}" ] || [ "${fedora}" ] || {
      echo "${ID_LIKE}" | grep debian >/dev/null && debian=1
    }
  else
    if [ -f /etc/arch-release ]; then
      arch=1
    else
      case "${mach}" in
        arm*)
          debian=1
          ;;
        x86*)
          if [ "${have_apt}" ]; then
            debian=1
          else
            if [ -f /etc/fedora-release ]; then
              fedora=1
            else
              if [ "${have_dnf}" ] || [ "${have_yum}" ]; then
                # Use Fedora RPM for all other rpm based systems
                fedora=1
              else
                echo "Unknown operating system distribution"
              fi
            fi
          fi
          ;;
        *)
          echo "Unknown machine architecture"
          ;;
      esac
    fi
  fi
fi

[ "${debian}" ] && {
  if [ "${have_apt}" ]; then
    APT="apt -q -y"
  else
    if [ "${have_aptget}" ]; then
      APT="apt-get -q -y"
    else
      echo "Could not locate apt or apt-get."
    fi
  fi
}

[ "${fedora}" ] && {
  if [ "${have_dnf}" ]; then
    DNF="dnf --assumeyes --quiet"
  else
    if [ "${have_yum}" ]; then
      DNF="yum --assumeyes --quiet"
    else
      echo "Could not locate dnf or yum."
    fi
  fi
}

ask_anim=
console=
debug=
quiet=
instmutt=
remove=
prompt=1
narg=
tellme=
update=

while getopts "acdmnqryUu" flag; do
  case $flag in
    a)
      ask_anim=1
      ;;
    c)
      console=1
      ;;
    d)
      debug=1
      ;;
    m)
      instmutt=1
      ;;
    n)
      narg="-n"
      tellme=1
      ;;
    q)
      quiet=1
      ;;
    r)
      remove=1
      ;;
    y)
      prompt=
      ;;
    U)
      update=1
      ;;
    *)
      usage
      ;;
  esac
done
shift $((OPTIND - 1))

argument=$(echo "$1" | tr '[:upper:]' '[:lower:]')

[ -d ${USERCONF} ] || mkdir -p ${USERCONF}

have_curl=$(type -p curl)
have_git=$(type -p git)
have_jq=$(type -p jq)
have_wget=$(type -p wget)
have_awk=$(type -p awk)
have_fc=$(type -p fc-cache)
have_mktemp=$(type -p mktemp)
have_unlink=$(type -p unlink)
have_unzip=$(type -p unzip)

if [ "${darwin}" ]; then
  usebrew=1
else
  usebrew=
fi
[ "${argument}" == "brew" ] && usebrew=1

[ "${update}" ] && {
  if [ "${tellme}" ]
  then
    if [ -d "${NEOMANDIR}" ]
    then
      printf "\nUpdating %s" "${NEOMANDIR}"
      printf "\ngit -C %s pull" "${NEOMANDIR}"
    else
      printf "\n%s does not exist or is not a directory. Re-run neoman without arguments" "${NEOMANDIR}"
      usage
    fi
  else
    if [ -d "${NEOMANDIR}" ]
    then
      printf "\nUpdating %s" "${NEOMANDIR}"
      git -C "${NEOMANDIR}" pull
    else
      printf "\n%s does not exist or is not a directory. Re-run neoman without arguments" "${NEOMANDIR}"
      usage
    fi
  fi
  printf "\n"
  exit 0
}

run_setup=1
[ -f "${INITIAL}" ] && {
  grep "__run_setup__" "${INITIAL}" >/dev/null || run_setup=
}
[ "${run_setup}" ] && {
  [ -x "${NEOMANDIR}/scripts/setup.sh" ] && {
    "${NEOMANDIR}"/scripts/setup.sh
    [ -f "${INITIAL}" ] && {
      echo "__run_setup__=1" >>"${INITIAL}"
    }
  }
}

[ "${instmutt}" ] && {
  if [ "${have_neomutt}" ]
  then
    printf "\nNeoMutt already installed\n"
  else
    [ -x "${NEOMANDIR}/scripts/setup.sh" ] && {
      "${NEOMANDIR}"/scripts/setup.sh neomutt
    }
  fi
}

have_kitty=$(type -p kitty)
[ "${argument}" == "kitty" ] && {
  [ "${remove}" ] && {
    [ -x "${NEOMANDIR}/scripts/setup.sh" ] && {
      "${NEOMANDIR}"/scripts/setup.sh -r kitty
    }
    exit 0
  }
  [ -x "${NEOMANDIR}/scripts/setup.sh" ] && {
    "${NEOMANDIR}"/scripts/setup.sh kitty
  }
  exit 0
}

[ "${argument}" == "neovim" ] && {
  [ "${remove}" ] && {
    [ -x "${NEOMANDIR}/scripts/setup.sh" ] && {
      "${NEOMANDIR}"/scripts/setup.sh -r neovim
    }
    exit 0
  }
  [ -x "${NEOMANDIR}/scripts/setup.sh" ] && {
    "${NEOMANDIR}"/scripts/setup.sh neovim
  }
  exit 0
}

[ "${argument}" == "games" ] && {
  [ "${remove}" ] && {
    [ -x "${NEOMANDIR}/scripts/setup.sh" ] && {
      "${NEOMANDIR}"/scripts/setup.sh -r games
    }
    exit 0
  }
  [ -x "${NEOMANDIR}/scripts/setup.sh" ] && {
    "${NEOMANDIR}"/scripts/setup.sh games
  }
  exit 0
}

# TODO: Add menu system here
