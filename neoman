#!/bin/bash
#
# neoman - initialize configuration files, install needed utilities
#
# shellcheck disable=SC2001,SC2002,SC2016,SC2006,SC2059,SC2086,SC2089,SC2181,SC2129

darwin=
platform=$(uname -s)
if [ "${platform}" == "Darwin" ]; then
  TOP="/usr/local"
  darwin=1
else
  TOP="/usr"
fi
CONFDIR=${TOP}/share/neoman
USERCONF="${HOME}/.config"
LMANDIR="${USERCONF}/nvim-Lazyman"
NEOMANDIR="${USERCONF}/neoman"
FONTDIR="${CONFDIR}/figlet-fonts"
FONTS=("Chiseled" "Epic" "Fire Font-k" "Graceful" "Script" "Shadow" "Slant" "Small" "Speed" "Standard")
INITIAL="${NEOMANDIR}/.initialized"
GHUC="https://raw.githubusercontent.com"
OWNER=doctorfree
BOLD=$(tput bold 2>/dev/null)
NORM=$(tput sgr0 2>/dev/null)

# Neovim 0.9+ honors this
# Override user's setting to install in standard location
export NVIM_APPNAME="nvim-Lazyman"

usage() {
  if [ "${have_rich}" ]; then
    rich "[bold]Usage:[/] [bold italic green]neoman[/] [cyan]\[-a] \[-c] \[-d] \[-m] \[-q] \[-r] \[-y] \[-u] \[-U] \[arg][/]" --print
    rich "[bold]Where:[/]" --print
    rich "    [cyan]-a[/] indicates [yellow] ask to play an animation when done[/]" --print
    rich "    [cyan]-c[/] indicates [yellow]console mode - no windowing system, headless config[/]" --print
    rich "    [cyan]-d[/] indicates [yellow]debug mode[/]" --print
    rich "    [cyan]-m[/] indicates [yellow]setup user NeoMutt configuration[/]" --print
    rich "    [cyan]-q[/] indicates [yellow]quiet mode[/]" --print
    rich "    [cyan]-r[/] indicates [yellow]remove service/package[/]" --print
    rich "    [cyan]-y[/] indicates [yellow]answer yes at all prompts[/]" --print
    rich "    [cyan]-u[/] indicates [yellow]display this usage message and exit[/]" --print
    rich "    [cyan]-U[/] indicates [yellow]update Neoman and exit[/]" --print
    rich "    If [cyan]arg[/] is [cyan]brew[/] [yellow]Homebrew is installed and used[/]" --print
    rich "    [cyan]arg[/] can also be one of [cyan]games[/], [cyan]kitty[/], [cyan]neovim[/]," --print
    rich "        [cyan]btop[/], [cyan]newsboat[/], [cyan]w3m[/], or [cyan]neofetch[/]" --print
    rich "        indicating [yellow]installation or removal[/] of [cyan]arg[/]" --print
    printf "\n"
  else
    printf "\nUsage: neoman [-a] [-c] [-d] [-m] [-q] [-r] [-y] [-u] [-U] [arg]"
    printf "\nWhere:"
    printf "\n\t-a indicates ask to play an animation when done"
    printf "\n\t-c indicates console mode - no windowing system, headless config"
    printf "\n\t-d indicates debug mode"
    printf "\n\t-m indicates setup user NeoMutt configuration"
    printf "\n\t-q indicates quiet mode"
    printf "\n\t-r indicates remove service/package"
    printf "\n\t-y indicates answer yes at all prompts"
    printf "\n\t-u indicates display this usage message and exit"
    printf "\n\t-U indicates update Neoman and exit"
    printf "\n\tif 'arg' is 'brew' Homebrew is installed and used"
    printf "\n\targ can also be one of games, kitty, neovim"
    printf "\n\t\tbtop, newsboat, w3m, or neofetch"
    printf "\n\t\tindicating installation of removal of arg\n"
  fi
  exit 1
}

# Compare two version strings [$1: version string 1 (v1), $2: version string 2 (v2)]
# Return values:
#   0: v1 == v2
#   1: v1 > v2
#   2: v1 < v2
# Based on https://stackoverflow.com/a/4025065 by Dennis Williamson
# and https://stackoverflow.com/questions/4023830/how-to-compare-two-strings-in-dot-separated-version-format-in-bash/49351294#49351294 by Github user @fonic
compare_versions() {
  # Trivial v1 == v2 test based on string comparison
  [[ "$1" == "$2" ]] && return 0

  # Local variables
  local regex="^(.*)-r([0-9]*)$" va1=() vr1=0 va2=() vr2=0 len i IFS="."

  # Split version strings into arrays, extract trailing revisions
  if [[ "$1" =~ ${regex} ]]; then
    va1=("${BASH_REMATCH[1]}")
    [[ -n "${BASH_REMATCH[2]}" ]] && vr1=${BASH_REMATCH[2]}
  else
    va1=("$1")
  fi
  if [[ "$2" =~ ${regex} ]]; then
    va2=("${BASH_REMATCH[1]}")
    [[ -n "${BASH_REMATCH[2]}" ]] && vr2=${BASH_REMATCH[2]}
  else
    va2=("$2")
  fi

  # Bring va1 and va2 to same length by filling empty fields with zeros
  ((${#va1[@]} > ${#va2[@]})) && len=${#va1[@]} || len=${#va2[@]}
  for ((i = 0; i < len; ++i)); do
    [[ -z "${va1[i]}" ]] && va1[i]="0"
    [[ -z "${va2[i]}" ]] && va2[i]="0"
  done

  # Append revisions, increment length
  va1+=("$vr1")
  va2+=("$vr2")
  len=$((len + 1))

  # Compare version elements, check if v1 > v2 or v1 < v2
  for ((i = 0; i < len; ++i)); do
    if ((10#${va1[i]} > 10#${va2[i]})); then
      return 1
    elif ((10#${va1[i]} < 10#${va2[i]})); then
      return 2
    fi
  done

  # All elements are equal, thus v1 == v2
  return 0
}

set_haves() {
  have_brew=$(type -p brew)
  have_go=$(type -p go)
  have_mutt=$(type -p mutt)
  have_neomutt=$(type -p neomutt)
  have_neovim=$(type -p nvim)
  have_rich=$(type -p rich)
  have_apt=$(type -p apt)
  have_aptget=$(type -p apt-get)
  have_dnf=$(type -p dnf)
  have_yum=$(type -p yum)
  have_figlet=$(type -p figlet)
}

remove_package() {
  PKG="$1"
  [ "${quiet}" ] || printf "\n\tRemoving %s ..." "${PKG}"
  # Try Brew first
  [ "${have_brew}" ] || usebrew=
  if [ "${usebrew}" ]; then
    if [ "${tellme}" ]
    then
      echo "brew uninstall -q ${PKG}"
    else
      brew uninstall -q ${PKG} >/dev/null 2>&1
    fi
  else
    if [ "${debian}" ]; then
      if [ "${APT}" ]; then
        if [ "${tellme}" ]
        then
          echo "sudo ${APT} remove ${PKG}"
        else
          sudo ${APT} remove ${PKG} >/dev/null 2>&1
        fi
      else
        [ "${quiet}" ] || printf "\n\t\tCannot locate apt to remove. Skipping ..."
      fi
    else
      if [ "${fedora}" ]; then
        if [ "${DNF}" ]; then
          if [ "${tellme}" ]
          then
            echo "sudo ${DNF} remove ${PKG}"
          else
            sudo ${DNF} remove ${PKG} >/dev/null 2>&1
          fi
        else
          [ "${quiet}" ] || printf "\n\t\tCannot locate dnf to remove. Skipping ..."
        fi
      else
        [ "${arch}" ] && {
          if [ "${tellme}" ]
          then
            echo "sudo pacman -R --noconfirm ${PKG}"
          else
            sudo pacman -R --noconfirm ${PKG} >/dev/null 2>&1
          fi
        }
      fi
    fi
  fi
  [ "${quiet}" ] || printf " done"
}

install_package() {
  PKG="$1"
  [ "${quiet}" ] || printf "\n\tInstalling %s ..." "${PKG}"
  # Try Brew first
  brewed=
  [ "${usebrew}" ] && {
    brew search -q /^${PKG}$/ >/dev/null 2>&1
    [ $? -eq 0 ] && {
      if [ "${tellme}" ]
      then
        echo "brew install --quiet ${PKG}"
      else
        brew install --quiet ${PKG} >/dev/null 2>&1
        [ $? -eq 0 ] || brew link --overwrite --quiet ${PKG} >/dev/null 2>&1
      fi
      brewed=1
    }
  }
  [ "${brewed}" ] || {
    if [ "${debian}" ]; then
      if [ "${APT}" ]; then
        if [ "${tellme}" ]
        then
          echo "sudo ${APT} install ${PKG}"
        else
          sudo ${APT} install ${PKG} >/dev/null 2>&1
        fi
      else
        [ "${quiet}" ] || printf "\n\t\tCannot locate apt to install. Skipping ..."
      fi
    else
      if [ "${fedora}" ]; then
        if [ "${DNF}" ]; then
          if [ "${tellme}" ]
          then
            echo "sudo ${DNF} install ${PKG}"
          else
            sudo ${DNF} install ${PKG} >/dev/null 2>&1
          fi
        else
          [ "${quiet}" ] || printf "\n\t\tCannot locate dnf to install. Skipping ..."
        fi
      else
        [ "${arch}" ] && {
          if [ "${tellme}" ]
          then
            echo "sudo pacman -S --noconfirm ${PKG}"
          else
            sudo pacman -S --noconfirm ${PKG} >/dev/null 2>&1
          fi
        }
      fi
    fi
  }
  [ "${quiet}" ] || printf " done"
}

install_pipx() {
  [ "${quiet}" ] || {
    printf "\n\tInstalling pipx ..."
  }
  if [ "${tellme}" ]
  then
    echo "${PYTHON} -m pip install --user pipx"
    echo "${PYTHON} -m pipx ensurepath --force"
  else
    ${PYTHON} -m pip install --user pipx >/dev/null 2>&1
    ${PYTHON} -m pipx ensurepath --force >/dev/null 2>&1
  fi
  [ "${quiet}" ] || {
    printf " done"
  }
}

install_external_package() {
  API_URL="https://api.github.com/repos/${OWNER}/${PROJECT}/releases/latest"
  DL_URL=
  [ "${have_curl}" ] && [ "${have_jq}" ] && {
    if [ "${darwin}" ]; then
      DL_URL=$(curl --silent "${API_URL}" \
          | jq --raw-output '.assets | .[]?.browser_download_url' \
        | grep "\.Darwin\.tgz")
    else
      if [ "${arch}" ]; then
        DL_URL=$(curl --silent "${API_URL}" \
            | jq --raw-output '.assets | .[]?.browser_download_url' \
          | grep "\.pkg\.tar\.zst")
      else
        if [ "${centos}" ] || [ "${fedora}" ]; then
          DL_URL=$(curl --silent "${API_URL}" \
              | jq --raw-output '.assets | .[]?.browser_download_url' \
            | grep "x86_64\.rpm")
        else
          if [ "${debian}" ]; then
            if [ "${mach}" == "x86_64" ]; then
              DL_URL=$(curl --silent "${API_URL}" \
                  | jq --raw-output '.assets | .[]?.browser_download_url' \
                | grep "\.amd64\.deb")
            else
              DL_URL=$(curl --silent "${API_URL}" \
                  | jq --raw-output '.assets | .[]?.browser_download_url' \
                | grep "\.arm.*\.deb")
            fi
          else
            printf "\n\tNo %s release asset found for this platform ..." "${PROJECT}"
          fi
        fi
      fi
    fi
  }

  [ "${DL_URL}" ] && {
    [ "${quiet}" ] || {
      printf "\n\tInstalling %s ..." "${PROJECT}"
    }
    if [ "${debian}" ]; then
      [ "${have_wget}" ] && {
        TEMP_DEB="$(mktemp --suffix=.deb)"
        if [ "${tellme}" ]
        then
          echo "wget --quiet -O ${TEMP_DEB} ${DL_URL}"
          echo "chmod 644 ${TEMP_DEB}"
          [ "${APT}" ] && echo "sudo ${APT} install ${TEMP_DEB}"
        else
          wget --quiet -O "${TEMP_DEB}" "${DL_URL}" >/dev/null 2>&1
          chmod 644 "${TEMP_DEB}"
          [ "${APT}" ] && sudo ${APT} install "${TEMP_DEB}" >/dev/null 2>&1
        fi
        rm -f "${TEMP_DEB}"
      }
    else
      if [ "${centos}" ] || [ "${fedora}" ]; then
        [ "${DNF}" ] && {
          if [ "${tellme}" ]
          then
            echo "sudo ${DNF} install ${DL_URL}"
          else
            sudo ${DNF} install ${DL_URL} >/dev/null 2>&1
          fi
        }
      else
        # Until we sign Arch packages we need to download and install locally
        if [ "${arch}" ]; then
          [ "${have_wget}" ] && {
            TEMP_ARCH="$(mktemp --suffix=.zst)"
            if [ "${tellme}" ]
            then
              echo "wget --quiet -O ${TEMP_ARCH} ${DL_URL}"
              echo "chmod 644 ${TEMP_ARCH}"
              echo "sudo pacman -U --noconfirm ${TEMP_ARCH}"
            else
              wget --quiet -O "${TEMP_ARCH}" "${DL_URL}" >/dev/null 2>&1
              chmod 644 "${TEMP_ARCH}"
              sudo pacman -U --noconfirm "${TEMP_ARCH}" >/dev/null 2>&1
            fi
            rm -f "${TEMP_ARCH}"
          }
        else
          [ "${darwin}" ] && {
            [ "${have_wget}" ] && {
              TEMP_ARCH="$(mktemp --suffix=.tgz)"
              if [ "${tellme}" ]
              then
                echo "wget --quiet -O ${TEMP_ARCH} ${DL_URL}"
                echo "chmod 644 ${TEMP_ARCH}"
                echo "tar xzf ${TEMP_ARCH} -C /"
              else
                wget --quiet -O "${TEMP_ARCH}" "${DL_URL}" >/dev/null 2>&1
                chmod 644 "${TEMP_ARCH}"
                tar xzf "${TEMP_ARCH}" -C /
              fi
              rm -f "${TEMP_ARCH}"
            }
          }
        fi
      fi
    fi
    [ "${quiet}" ] || {
      printf " done"
    }
  }
}

install_kitty() {
  have_stow=$(type -p stow)
  if [ "${have_stow}" ]; then
    LOCAL=".local/stow/kitty.app"
  else
    LOCAL=".local/kitty.app"
  fi
  [ "${have_kitty}" ] || {
    [ "${quiet}" ] || {
      printf "\n\tInstalling Kitty terminal emulator ..."
    }
    curl --silent --location \
      https://sw.kovidgoyal.net/kitty/installer.sh >/tmp/kitty-$$.sh
    [ $? -eq 0 ] || {
      rm -f /tmp/kitty-$$.sh
      curl --insecure --silent --location \
        https://sw.kovidgoyal.net/kitty/installer.sh >/tmp/kitty-$$.sh
      cat /tmp/kitty-$$.sh | sed -e "s/curl -/curl -k/" >/tmp/k$$
      cp /tmp/k$$ /tmp/kitty-$$.sh
      rm -f /tmp/k$$
    }
    if [ -s /tmp/kitty-$$.sh ]; then
      if [ "${have_stow}" ]; then
        sh /tmp/kitty-$$.sh launch=n dest=~/.local/stow >/dev/null 2>&1
        [ -d "${HOME}"/.local/stow ] && {
          cd "${HOME}"/.local/stow || echo "Unable to stow kitty.app"
          stow kitty.app
        }
      else
        sh /tmp/kitty-$$.sh launch=n >/dev/null 2>&1
      fi
      rm -f /tmp/kitty-$$.sh
      # Create a symbolic link to add kitty to PATH
      [ -d ~/.local/bin ] || mkdir -p ~/.local/bin
      if [ -x ~/${LOCAL}/bin/kitty ]; then
        [ -x ~/.local/bin/kitty ] || {
          ln -s ~/${LOCAL}/bin/kitty ~/.local/bin/
        }
      else
        if [ -x /Applications/kitty.app/Contents/MacOS/kitty ]; then
          [ -x ~/.local/bin/kitty ] || {
            ln -s /Applications/kitty.app/Contents/MacOS/kitty ~/.local/bin/
          }
        else
          [ "${quiet}" ] || printf "\nUnable to create Kitty link to ~/.local/bin/\n"
        fi
      fi
      # Link the kitty man pages somewhere it can be found by the man command
      LINMAN="${HOME}/${LOCAL}/share/man"
      MACMAN="/Applications/kitty.app/Contents/Resources/man"
      [ -d ~/.local/share/man/man1 ] || mkdir -p ~/.local/share/man/man1
      [ -f ~/.local/share/man/man1/kitty.1 ] || {
        [ -d ${HOME}/.local/share/man/man1 ] || {
          mkdir -p ${HOME}/.local/share/man/man1
        }
        if [ -f "${LINMAN}/man1/kitty.1" ]; then
          ln -s "${LINMAN}/man1/kitty.1" ~/.local/share/man/man1/
        else
          [ -f "${MACMAN}/man1/kitty.1" ] && {
            ln -s "${MACMAN}/man1/kitty.1" ~/.local/share/man/man1/
          }
        fi
      }
      [ -d ~/.local/share/man/man5 ] || mkdir -p ~/.local/share/man/man5
      [ -f ~/.local/share/man/man5/kitty.conf.5 ] || {
        [ -d ${HOME}/.local/share/man/man5 ] || {
          mkdir -p ${HOME}/.local/share/man/man5
        }
        if [ -f "${LINMAN}/man5/kitty.conf.5" ]; then
          ln -s "${LINMAN}/man5/kitty.conf.5" ~/.local/share/man/man5/
        else
          [ -f "${MACMAN}/man5/kitty.conf.5" ] && {
            ln -s "${MACMAN}/man5/kitty.conf.5" ~/.local/share/man/man5/
          }
        fi
      }
      # Place the kitty.desktop file somewhere it can be found by the OS
      [ -d ~/.local/share/applications ] || mkdir -p ~/.local/share/applications
      [ -f "${HOME}/${LOCAL}/share/applications/kitty.desktop" ] && {
        [ -f ~/.local/share/applications/kitty.desktop ] || {
          cp ~/${LOCAL}/share/applications/kitty.desktop \
            ~/.local/share/applications/
        }
      }
      # If you want to open text files and images in kitty via your file manager
      # also add the kitty-open.desktop file
      [ -f "${HOME}/${LOCAL}/share/applications/kitty-open.desktop" ] && {
        [ -f ~/.local/share/applications/kitty-open.desktop ] || {
          cp ~/${LOCAL}/share/applications/kitty-open.desktop \
            ~/.local/share/applications/
        }
      }
      # Update the paths to the kitty and its icon in the kitty.desktop file(s)
      for desktop in "${HOME}"/.local/share/applications/kitty*.desktop; do
        [ "${desktop}" == "${HOME}/.local/share/applications/kitty*.desktop" ] && continue
        [ -f /home/${MPP_USER}/${LOCAL}/share/icons/hicolor/256x256/apps/kitty.png ] && {
          sed -i "s|Icon=kitty|Icon=/home/${MPP_USER}/${LOCAL}/share/icons/hicolor/256x256/apps/kitty.png|g" "${desktop}"
        }
        [ -x /home/${MPP_USER}/${LOCAL}/bin/kitty ] && {
          sed -i "s|Exec=kitty|Exec=/home/${MPP_USER}/${LOCAL}/bin/kitty|g" "${desktop}"
        }
      done
      [ "${quiet}" ] || printf " done!\n"
    else
      printf "\n${BOLD}ERROR:${NORM} Download of kitty installation script failed"
      printf "\nSee https://sw.kovidgoyal.net/kitty/binary/#manually-installing"
      printf "\nto manually install the kitty terminal emulator\n"
    fi
    have_kitty=$(type -p kitty)
  }
  # Install the Kitty terminfo entry
  KITERM="${HOME}/.terminfo/x/xterm-kitty"
  MATERM="${HOME}/.terminfo/78/xterm-kitty"
  MACAPP="/Applications/kitty.app/Contents/Resources/kitty/terminfo"
  [ -f "${KITERM}" ] || [ -f "${MATERM}" ] || {
    [ -d ${HOME}/.terminfo ] || mkdir -p ${HOME}/.terminfo
    [ -d ${HOME}/.terminfo/x ] || mkdir -p ${HOME}/.terminfo/x
    [ -d ${HOME}/.terminfo/78 ] || mkdir -p ${HOME}/.terminfo/78
    have_tic=$(type -p tic)
    [ "${have_tic}" ] && {
      if [ -f "${HOME}/${LOCAL}/lib/kitty/terminfo/kitty.terminfo" ]; then
        tic -x -o ${HOME}/.terminfo \
          "${HOME}/${LOCAL}/lib/kitty/terminfo/kitty.terminfo" >/dev/null 2>&1
      else
        [ -f "${MACAPP}/kitty.terminfo" ] && {
          tic -x -o ${HOME}/.terminfo \
            "${MACAPP}/kitty.terminfo" >/dev/null 2>&1
        }
      fi
    }
    [ -f "${KITERM}" ] || [ -f "${MATERM}" ] || {
      if [ -f "${HOME}/${LOCAL}/lib/kitty/terminfo/x/xterm-kitty" ]; then
        cp "${HOME}/${LOCAL}/lib/kitty/terminfo/x/xterm-kitty" "${KITERM}"
      else
        if [ -f "${HOME}/${LOCAL}/share/terminfo/x/xterm-kitty" ]; then
          cp "${HOME}/${LOCAL}/share/terminfo/x/xterm-kitty" "${KITERM}"
        else
          if [ -f "${MACAPP}/78/xterm-kitty" ]; then
            cp "${MACAPP}/78/xterm-kitty" "${MATERM}"
          else
            [ "${quiet}" ] || printf "\nUnable to create Kitty terminfo entry ${KITERM}\n"
          fi
        fi
      fi
    }
  }
}

remove_kitty() {
  if [ "${tellme}" ]
  then
    echo "rm -rf ~/.local/kitty.app"
    echo "rm -f ~/.local/bin/kitty"
    echo "rm -f ~/.local/share/applications/kitty.desktop"
    echo "rm -f ~/.local/share/applications/kitty-open.desktop"
    echo "rm -f ~/.local/share/man/man1/kitty.1"
    echo "rm -f ~/.local/share/man/man5/kitty.conf.5"
    [ -d /Applications/kitty.app ] && echo "sudo rm -rf /Applications/kitty.app"
  else
    rm -rf ~/.local/kitty.app
    rm -f ~/.local/bin/kitty
    rm -f ~/.local/share/applications/kitty.desktop
    rm -f ~/.local/share/applications/kitty-open.desktop
    rm -f ~/.local/share/man/man1/kitty.1
    rm -f ~/.local/share/man/man5/kitty.conf.5
    [ -d /Applications/kitty.app ] && sudo rm -rf /Applications/kitty.app
  fi
}

remove_neovim() {
  if [ "${have_brew}" ]; then
    brew uninstall -q neovim >/dev/null 2>&1
  else
    printf "\nCannot locate brew. Skipping Neovim removal."
  fi
}

install_neovim() {
  if [ "${usebrew}" ]; then
    install_args="-h -q -Q -y -z"
  else
    install_args="-q -Q -y -z"
  fi
  [ "${debug}" ] && install_args="${install_args} -d"
  if [ -x ${LMANDIR}/lazyman.sh ]; then
    ${LMANDIR}/lazyman.sh -I ${install_args}
    [ -f "${INITIAL}" ] && {
      echo "__install_neovim__=1" >>"${INITIAL}"
    }
  else
    [ -x ${NEOMANDIR}/scripts/lazyman.sh ] && {
      ${NEOMANDIR}/scripts/lazyman.sh ${install_args}
      [ -f "${INITIAL}" ] && {
        echo "__install_neovim__=1" >>"${INITIAL}"
      }
    }
  fi
  have_neovim=$(type -p nvim)
}

pathadd() {
  if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
    export PATH="$1${PATH:+":$PATH"}"
  fi
}

pathadd "/usr/local/bin"
pathadd "${HOME}/.local/bin"

# Clear the Bash cache so we know for sure if something is installed
hash -r

set_haves
[ "${have_go}" ] || {
  [ -x /usr/local/go/bin/go ] && {
    pathadd "/usr/local/go/bin"
    have_go=$(type -p go)
  }
}

arch=
debian=
fedora=
mach=$(uname -m)
APT=
DNF=

case "${mach}" in
  arm*)
    VOPT=
    ;;
  *)
    VOPT="--install-option='--with-audio'"
    ;;
esac

if [ "$platform" == "Darwin" ]; then
  darwin=1
else
  if [ -f /etc/os-release ]; then
    . /etc/os-release
    [ "${ID}" == "debian" ] || [ "${ID_LIKE}" == "debian" ] && debian=1
    [ "${ID}" == "arch" ] || [ "${ID_LIKE}" == "arch" ] && arch=1
    [ "${ID}" == "fedora" ] && fedora=1
    [ "${arch}" ] || [ "${debian}" ] || [ "${fedora}" ] || {
      echo "${ID_LIKE}" | grep debian >/dev/null && debian=1
    }
  else
    if [ -f /etc/arch-release ]; then
      arch=1
    else
      case "${mach}" in
        arm*)
          debian=1
          ;;
        x86*)
          if [ "${have_apt}" ]; then
            debian=1
          else
            if [ -f /etc/fedora-release ]; then
              fedora=1
            else
              if [ "${have_dnf}" ] || [ "${have_yum}" ]; then
                # Use Fedora RPM for all other rpm based systems
                fedora=1
              else
                echo "Unknown operating system distribution"
              fi
            fi
          fi
          ;;
        *)
          echo "Unknown machine architecture"
          ;;
      esac
    fi
  fi
fi

[ "${debian}" ] && {
  if [ "${have_apt}" ]; then
    APT="apt -q -y"
  else
    if [ "${have_aptget}" ]; then
      APT="apt-get -q -y"
    else
      echo "Could not locate apt or apt-get."
    fi
  fi
}

[ "${fedora}" ] && {
  if [ "${have_dnf}" ]; then
    DNF="dnf --assumeyes --quiet"
  else
    if [ "${have_yum}" ]; then
      DNF="yum --assumeyes --quiet"
    else
      echo "Could not locate dnf or yum."
    fi
  fi
}

ask_anim=
console=
debug=
quiet=
instmutt=
remove=
prompt=1
narg=
tellme=
update=

while getopts "acdmnqryUu" flag; do
  case $flag in
    a)
      ask_anim=1
      ;;
    c)
      console=1
      ;;
    d)
      debug=1
      ;;
    m)
      instmutt=1
      ;;
    n)
      narg="-n"
      tellme=1
      ;;
    q)
      quiet=1
      ;;
    r)
      remove=1
      ;;
    y)
      prompt=
      ;;
    U)
      update=1
      ;;
    *)
      usage
      ;;
  esac
done
shift $((OPTIND - 1))

argument=$(echo "$1" | tr '[:upper:]' '[:lower:]')

[ -d ${USERCONF} ] || mkdir -p ${USERCONF}

have_curl=$(type -p curl)
have_git=$(type -p git)
have_jq=$(type -p jq)
have_wget=$(type -p wget)
have_awk=$(type -p awk)
have_fc=$(type -p fc-cache)
have_mktemp=$(type -p mktemp)
have_unlink=$(type -p unlink)
have_unzip=$(type -p unzip)

if [ "${darwin}" ]; then
  usebrew=1
else
  usebrew=
fi
[ "${argument}" == "brew" ] && usebrew=1

[ "${update}" ] && {
  if [ "${tellme}" ]
  then
    if [ -d "${NEOMANDIR}" ]
    then
      printf "\nUpdating %s" "${NEOMANDIR}"
      printf "\ngit -C %s pull" "${NEOMANDIR}"
    else
      printf "\n%s does not exist or is not a directory. Re-run neoman without arguments" "${NEOMANDIR}"
      usage
    fi
  else
    if [ -d "${NEOMANDIR}" ]
    then
      printf "\nUpdating %s" "${NEOMANDIR}"
      git -C "${NEOMANDIR}" pull
    else
      printf "\n%s does not exist or is not a directory. Re-run neoman without arguments" "${NEOMANDIR}"
      usage
    fi
  fi
  printf "\n"
  exit 0
}

run_setup=1
[ -f "${INITIAL}" ] && {
  grep "__run_setup__" "${INITIAL}" >/dev/null || run_setup=
}
[ "${run_setup}" ] && {
  [ -x "${NEOMANDIR}/scripts/setup.sh" ] && {
    "${NEOMANDIR}"/scripts/setup.sh
    [ -f "${INITIAL}" ] && {
      echo "__run_setup__=1" >>"${INITIAL}"
    }
  }
}

[ "${instmutt}" ] && {
  if [ "${have_neomutt}" ]
  then
    printf "\nNeoMutt already installed\n"
  else
    [ -x "${NEOMANDIR}/scripts/setup.sh" ] && {
      "${NEOMANDIR}"/scripts/setup.sh neomutt
    }
  fi
}

have_kitty=$(type -p kitty)
[ "${argument}" == "kitty" ] && {
  [ "${remove}" ] && {
    [ -x "${NEOMANDIR}/scripts/setup.sh" ] && {
      "${NEOMANDIR}"/scripts/setup.sh -r kitty
    }
    exit 0
  }
  [ -x "${NEOMANDIR}/scripts/setup.sh" ] && {
    "${NEOMANDIR}"/scripts/setup.sh kitty
  }
  exit 0
}

[ "${argument}" == "neovim" ] && {
  [ "${remove}" ] && {
    [ -x "${NEOMANDIR}/scripts/setup.sh" ] && {
      "${NEOMANDIR}"/scripts/setup.sh -r neovim
    }
    exit 0
  }
  [ -x "${NEOMANDIR}/scripts/setup.sh" ] && {
    "${NEOMANDIR}"/scripts/setup.sh neovim
  }
  exit 0
}

[ "${argument}" == "games" ] && {
  [ "${remove}" ] && {
    [ -x "${NEOMANDIR}/scripts/setup.sh" ] && {
      "${NEOMANDIR}"/scripts/setup.sh -r games
    }
    exit 0
  }
  [ -x "${NEOMANDIR}/scripts/setup.sh" ] && {
    "${NEOMANDIR}"/scripts/setup.sh games
  }
  exit 0
}

show_figlet() {
  if [ "$1" ]; then
    FIG_TEXT="$1"
  else
    FIG_TEXT="Neoman"
  fi
  # Seed random generator
  RANDOM=$$$(date +%s)
  USE_FONT=${FONTS[$RANDOM % ${#FONTS[@]}]}
  [ "${USE_FONT}" ] || USE_FONT="Standard"
  if [ "${have_lolcat}" ]; then
    figlet -c -d "${FONTDIR}" -f "${USE_FONT}" -k -t ${FIG_TEXT} 2>/dev/null | ${LOLCAT}
  else
    figlet -c -d "${FONTDIR}" -f "${USE_FONT}" -k -t ${FIG_TEXT} 2>/dev/null
  fi
}

# TODO: Replace Lazyman menu help text with Neoman menu help text
show_main_help() {
  if [ "${have_rich}" ]; then
    rich "[cyan]Neoman Multi Configuration Manager Menu Help[/cyan]" -p -a rounded -c -C
  else
    printf "\n\tNeoman Multi Configuration Manager Menu Help\n"
  fi
  printf "\nSelect and install/open/remove Neovim configurations managed by Lazyman."
  printf "\nEnter a menu option number or keywords to select an option."
  printf "\nKeywords include: ${BOLD}help, info, install, open, remove search update${NORM}"
  printf "\nIn the fuzzy selection dialogs, enter a few letters to fuzzy select from the options"
  printf "\nor use the <Up-Arrow> and <Down-Arrow> keys to move through the options."
  printf "\nPress <Enter> to select the highlighted option.\n"
  printf "\nLazyman Neovim configurations are organized into categories. Configurations can be"
  printf "\nindividually installed/removed or all configurations in a category can be acted on.\n"
  printf "\nThis menu also provides options to install additional tools, enable debug mode,"
  printf "\ninstall the Bob Neovim version manager, select the Neovim version to use, toggle"
  printf "\nthe user interface between Neovim and Neovide, perform a Neovim health check, "
  printf "\nbring up the Lazyman Neovim Configuration menu, or generate a status report."
  printf "\nIn addition, an option exists to view the Lazyman manual.\n"
  printf "\nThe Lazyman Neovim configuration manager can also be used from the command line.\n"
  printf "\n\t${BOLD}${LINE}Usage:${NORM} ${BOLD}lazyman [options] <COMMAND>${NORM}"
  printf "\n\t${BOLD}${LINE}See:${NORM}   ${BOLD}lazyman -u${NORM}  for usage details\n"
  prompt_continue
}

show_main_menu() {
  help=
  set_haves
  while true; do
    [ "$debug" ] || tput reset
    if [ "${have_figlet}" ]; then
      show_figlet
    else
      [ "${have_rich}" ] && rich "[cyan]Neoman Main Menu[/cyan]" -p -a rounded -c -C
    fi
    options=()

    PS3="${BOLD}Enter a choice (number, shortcut, or text, 'h' help): ${NORM}"
    options+=("Select and Install")
    [ "${have_neovide}" ] || {
      USEGUI=
      use_gui="neovim"
      options+=("Install Neovide")
    }
    if typeset -f nvims >/dev/null 2>&1; then
      [ ${numitems} -gt 0 ] && {
        if [ ${numitems} -gt 1 ]; then
          options+=("Select and Open")
          options+=("Open from Category")
        else
          options+=("Open Lazyman Config")
        fi
      }
    fi

    shortcuts="help info install open search update"
    options+=("Select and Remove")
    options+=("Remove Category")
    options+=("Select and Update")
    options+=("Update Category")
    if [ -f "${INITIAL}" ]; then
      grep "__extra_tools__" "${INITIAL}" >/dev/null || {
        options+=("Install Tools")
      }
    else
      options+=("Initialize Neoman")
      options+=("Install Tools")
    fi
    have_bob=$(type -p bob)
    [ "${have_bob}" ] || {
      options+=("Install Bob")
      options+=(" What is Bob?")
    }
    options+=("Config Info" "Health Check" "Plugin Search")
    numnvim=$(ps -ef | grep ' nvim ' | grep -v grep | wc -l)
    [ ${numnvim} -gt 0 ] && {
      [ -x ${KILLNVIM} ] && options+=("Kill All Nvim")
    }
    options+=("Lazyman Config")
    [ -f ${HOME}/.config/nvim-LazyIde/lua/configuration.lua ] && {
      options+=("LazyIde Config")
    }
    [ -f ${HOME}/.config/nvim-Webdev/lua/configuration.lua ] && {
      options+=("Webdev Config")
    }
    options+=("Lazyman Manual" "Status Report" "Check for Updates")
    [ "${have_brew}" ] && {
      options+=("Homebrew Upgrade")
    }
    if [ "${debug}" ]; then
      options+=("Debug Mode [on]")
    else
      options+=("Debug Mode [off]")
    fi
    [ "${have_bob}" ] && {
      used=$(bob list | grep Used | awk ' { print $2 } ')
      options+=("Neovim Ver [${used}]")
    }
    if [ "${have_neovide}" ]; then
      options+=("Toggle UI [${use_gui}]")
    fi
    options+=("Quit")

    if [ "${have_rich}" ]; then
      rich "[b cyan]Selection shortcuts: [/] [b yellow]${shortcuts}[/]" -p
    else
      printf "\nSelection shortcuts:  ${BOLD}${shortcuts}${NORM}\n"
    fi
    select opt in "${options[@]}"; do
      case "$opt,$REPLY" in
      "h",* | *,"h" | "H",* | *,"H" | "help",* | *,"help" | "Help",* | *,"Help")
        [ "$debug" ] || tput reset
        printf "\n"
        show_main_help
        help=1
        break
        ;;
      "Lazyman Manual"*,* | *,"Lazyman Manual"*)
        [ "$debug" ] || tput reset
        printf "\n"
        man lazyman
        break
        ;;
      "Install from Category",* | *,"Install from Category")
        choices=()
        [ "${base_installed}" ] || choices+=("Select/Install from Base")
        [ "${lang_installed}" ] || choices+=("Select/Install from Languages")
        [ "${prsnl_installed}" ] || choices+=("Select/Install from Personals")
        [ "${start_installed}" ] || choices+=("Select/Install from Starters")
        [ "${astro_installed}" ] || choices+=("Select/Install from AstroNvims")
        [ "${lzyvm_installed}" ] || choices+=("Select/Install from LazyVims")
        [ "${lunar_installed}" ] || choices+=("Select/Install from LunarVims")
        [ "${nvchd_installed}" ] || choices+=("Select/Install from NvChads")
        [ "${iushort}" == "update" ] || choices+=("Select/Install from All")
        choice=$(printf "%s\n" "${choices[@]}" | fzf --prompt=" Select configuration category to install from  " --layout=reverse --border --exit-0)
        if [[ " ${choices[*]} " =~ " ${choice} " ]]; then
          case "${choice}" in
            "Select/Install from Base")
              bchoices=("All Base Configs")
              for neovim in ${BASECFGS}; do
                if [[ ! " ${sorted[*]} " =~ " ${neovim} " ]]; then
                  bchoices+=("${neovim}")
                fi
              done
              bchoice=$(printf "%s\n" "${bchoices[@]}" | fzf --prompt=" Select Base Neovim Config to Install  " --layout=reverse --border --exit-0)
              if [[ " ${bchoices[*]} " =~ " ${bchoice} " ]]; then
                install_config "${bchoice}"
              fi
              ;;
            "Select/Install from Languages")
              lchoices=("All Language Configs")
              for neovim in ${LANGUCFGS}; do
                if [[ ! " ${sorted[*]} " =~ " ${neovim} " ]]; then
                  lchoices+=("${neovim}")
                fi
              done
              lchoice=$(printf "%s\n" "${lchoices[@]}" | fzf --prompt=" Select Language Neovim Config to Install  " --layout=reverse --border --exit-0)
              if [[ " ${lchoices[*]} " =~ " ${lchoice} " ]]; then
                install_config "${lchoice}"
              fi
              ;;
            "Select/Install from Personals")
              pchoices=("All Personal Configs")
              for neovim in ${PRSNLCFGS}; do
                if [[ ! " ${sorted[*]} " =~ " ${neovim} " ]]; then
                  pchoices+=("${neovim}")
                fi
              done
              pchoice=$(printf "%s\n" "${pchoices[@]}" | fzf --prompt=" Select Personal Neovim Config to Install  " --layout=reverse --border --exit-0)
              if [[ " ${pchoices[*]} " =~ " ${pchoice} " ]]; then
                install_config "${pchoice}"
              fi
              ;;
            "Select/Install from Starters")
              schoices=("All Starter Configs")
              for neovim in ${STARTCFGS}; do
                if [[ ! " ${sorted[*]} " =~ " ${neovim} " ]]; then
                  schoices+=("${neovim}")
                fi
              done
              schoice=$(printf "%s\n" "${schoices[@]}" | fzf --prompt=" Select Starter Neovim Config to Install  " --layout=reverse --border --exit-0)
              if [[ " ${schoices[*]} " =~ " ${schoice} " ]]; then
                install_config "${schoice}"
              fi
              ;;
            "Select/Install from AstroNvims")
              achoices=("All AstroNvim Configs")
              for neovim in ${ASTROCFGS}; do
                if [[ ! " ${sorted[*]} " =~ " ${neovim} " ]]; then
                  achoices+=("${neovim}")
                fi
              done
              achoice=$(printf "%s\n" "${achoices[@]}" | fzf --prompt=" Select AstroNvim Neovim Config to Install  " --layout=reverse --border --exit-0)
              if [[ " ${achoices[*]} " =~ " ${achoice} " ]]; then
                install_config "${achoice}"
              fi
              ;;
            "Select/Install from NvChads")
              nchoices=("All NvChad Configs")
              for neovim in ${NVCHADCFGS}; do
                if [[ ! " ${sorted[*]} " =~ " ${neovim} " ]]; then
                  nchoices+=("${neovim}")
                fi
              done
              nchoice=$(printf "%s\n" "${nchoices[@]}" | fzf --prompt=" Select NvChad Neovim Config to Install  " --layout=reverse --border --exit-0)
              if [[ " ${nchoices[*]} " =~ " ${nchoice} " ]]; then
                install_config "${nchoice}"
              fi
              ;;
            "Select/Install from LazyVims")
              zchoices=("All LazyVim Configs")
              for neovim in ${LAZYVIMCFGS}; do
                if [[ ! " ${sorted[*]} " =~ " ${neovim} " ]]; then
                  zchoices+=("${neovim}")
                fi
              done
              zchoice=$(printf "%s\n" "${zchoices[@]}" | fzf --prompt=" Select LazyVim Neovim Config to Install  " --layout=reverse --border --exit-0)
              if [[ " ${zchoices[*]} " =~ " ${zchoice} " ]]; then
                install_config "${zchoice}"
              fi
              ;;
            "Select/Install from LunarVims")
              vchoices=("All LunarVim Configs")
              for neovim in ${LUNARVIMCFGS}; do
                if [[ ! " ${sorted[*]} " =~ " ${neovim} " ]]; then
                  vchoices+=("${neovim}")
                fi
              done
              vchoice=$(printf "%s\n" "${vchoices[@]}" | fzf --prompt=" Select LunarVim Neovim Config to Install  " --layout=reverse --border --exit-0)
              if [[ " ${vchoices[*]} " =~ " ${vchoice} " ]]; then
                install_config "${vchoice}"
              fi
              ;;
            "Select/Install from All")
              [ ${numunins} -gt 0 ] && {
                allchoice=$(printf "%s\n" "${uninstalled[@]}" | fzf --prompt=" Install Neovim Configuration  " --layout=reverse --border --exit-0)
                [ "${allchoice}" ] && install_config "${allchoice}"
              }
              ;;
          esac
        fi
        break
        ;;
      "Select and Install"*,* | *,"Select and Install"* | "install",* | *,"install" | "Install",* | *,"Install")
        [ ${numunins} -gt 0 ] && {
          choice=$(printf "%s\n" "${uninstalled[@]}" | fzf --prompt=" Install Neovim Configuration  " --layout=reverse --border --exit-0)
          [ "${choice}" ] && install_config "${choice}"
        }
        break
        ;;
      "Select and Update"*,* | *,"Select and Update"* | "update",* | *,"update" | "Update",* | *,"Update")
        choice=$(printf "%s\n" "${sorted[@]}" | fzf --prompt=" Update Neovim Config  " --layout=reverse --border --exit-0)
        [ "${choice}" ] && update_config "${choice}"
        break
        ;;
      "Open from Category",* | *,"Open from Category")
        choices=()
        [ "${base_partial}" ] && choices+=("Select and Open from Base")
        [ "${lang_partial}" ] && choices+=("Select and Open from Languages")
        [ "${prsnl_partial}" ] && choices+=("Select and Open from Personals")
        [ "${start_partial}" ] && choices+=("Select and Open from Starters")
        [ "${astro_partial}" ] && choices+=("Select and Open from AstroNvims")
        [ "${lzyvm_partial}" ] && choices+=("Select and Open from LazyVims")
        [ "${lunar_partial}" ] && choices+=("Select and Open from LunarVims")
        [ "${nvchd_partial}" ] && choices+=("Select and Open from NvChads")
        [ "${iushort}" == "update" ] || choices+=("Select and Open from All")
        choice=$(printf "%s\n" "${choices[@]}" | fzf --prompt=" Select configuration category to open from  " --layout=reverse --border --exit-0)
        if [[ " ${choices[*]} " =~ " ${choice} " ]]; then
          case "${choice}" in
            "Select and Open from Base")
              choices=()
              for neovim in ${BASECFGS}; do
                if [[ " ${sorted[*]} " =~ " ${neovim} " ]]; then
                  choices+=("${neovim}")
                fi
              done
              choice=$(printf "%s\n" "${choices[@]}" | fzf --prompt=" Select Base Neovim Config to Open  " --layout=reverse --border --exit-0)
              if [[ " ${choices[*]} " =~ " ${choice} " ]]; then
                if [ "${USEGUI}" ]; then
                  runconfig "nvim-${choice}" "neovide"
                else
                  runconfig "nvim-${choice}"
                fi
              fi
              ;;
            "Select and Open from Languages")
              choices=()
              for neovim in ${LANGUCFGS}; do
                if [[ " ${sorted[*]} " =~ " ${neovim} " ]]; then
                  choices+=("${neovim}")
                fi
              done
              choice=$(printf "%s\n" "${choices[@]}" | fzf --prompt=" Select Language Neovim Config to Open  " --layout=reverse --border --exit-0)
              if [[ " ${choices[*]} " =~ " ${choice} " ]]; then
                if [ "${USEGUI}" ]; then
                  runconfig "nvim-${choice}" "neovide"
                else
                  runconfig "nvim-${choice}"
                fi
              fi
              ;;
            "Select and Open from Personals")
              choices=()
              for neovim in ${PRSNLCFGS}; do
                if [[ " ${sorted[*]} " =~ " ${neovim} " ]]; then
                  choices+=("${neovim}")
                fi
              done
              choice=$(printf "%s\n" "${choices[@]}" | fzf --prompt=" Select Personal Neovim Config to Open  " --layout=reverse --border --exit-0)
              if [[ " ${choices[*]} " =~ " ${choice} " ]]; then
                if [ "${USEGUI}" ]; then
                  runconfig "nvim-${choice}" "neovide"
                else
                  runconfig "nvim-${choice}"
                fi
              fi
              ;;
            "Select and Open from Starters")
              choices=()
              for neovim in ${STARTCFGS}; do
                if [[ " ${sorted[*]} " =~ " ${neovim} " ]]; then
                  choices+=("${neovim}")
                fi
              done
              choice=$(printf "%s\n" "${choices[@]}" | fzf --prompt=" Select Starter Neovim Config to Open  " --layout=reverse --border --exit-0)
              if [[ " ${choices[*]} " =~ " ${choice} " ]]; then
                if [ "${USEGUI}" ]; then
                  runconfig "nvim-${choice}" "neovide"
                else
                  runconfig "nvim-${choice}"
                fi
              fi
              ;;
            "Select and Open from AstroNvims")
              choices=()
              for neovim in ${ASTROCFGS}; do
                if [[ " ${sorted[*]} " =~ " ${neovim} " ]]; then
                  choices+=("${neovim}")
                fi
              done
              choice=$(printf "%s\n" "${choices[@]}" | fzf --prompt=" Select AstroNvim Neovim Config to Open  " --layout=reverse --border --exit-0)
              if [[ " ${choices[*]} " =~ " ${choice} " ]]; then
                if [ "${USEGUI}" ]; then
                  runconfig "nvim-${choice}" "neovide"
                else
                  runconfig "nvim-${choice}"
                fi
              fi
              ;;
            "Select and Open from NvChads")
              choices=()
              for neovim in ${NVCHADCFGS}; do
                if [[ " ${sorted[*]} " =~ " ${neovim} " ]]; then
                  choices+=("${neovim}")
                fi
              done
              choice=$(printf "%s\n" "${choices[@]}" | fzf --prompt=" Select NvChad Neovim Config to Open  " --layout=reverse --border --exit-0)
              if [[ " ${choices[*]} " =~ " ${choice} " ]]; then
                if [ "${USEGUI}" ]; then
                  runconfig "nvim-${choice}" "neovide"
                else
                  runconfig "nvim-${choice}"
                fi
              fi
              ;;
            "Select and Open from LazyVims")
              choices=()
              for neovim in ${LAZYVIMCFGS}; do
                if [[ " ${sorted[*]} " =~ " ${neovim} " ]]; then
                  choices+=("${neovim}")
                fi
              done
              choice=$(printf "%s\n" "${choices[@]}" | fzf --prompt=" Select LazyVim Neovim Config to Open  " --layout=reverse --border --exit-0)
              if [[ " ${choices[*]} " =~ " ${choice} " ]]; then
                if [ "${USEGUI}" ]; then
                  runconfig "nvim-${choice}" "neovide"
                else
                  runconfig "nvim-${choice}"
                fi
              fi
              ;;
            "Select and Open from LunarVims")
              choices=()
              for neovim in ${LUNARVIMCFGS}; do
                if [[ " ${sorted[*]} " =~ " ${neovim} " ]]; then
                  choices+=("${neovim}")
                fi
              done
              choice=$(printf "%s\n" "${choices[@]}" | fzf --prompt=" Select LunarVim Neovim Config to Open  " --layout=reverse --border --exit-0)
              if [[ " ${choices[*]} " =~ " ${choice} " ]]; then
                if [ "${USEGUI}" ]; then
                  runconfig "nvim-${choice}" "neovide"
                else
                  runconfig "nvim-${choice}"
                fi
              fi
              ;;
            "Select and Open from All")
              if [ "${USEGUI}" ]; then
                neovides
              else
                nvims
              fi
              ;;
	  esac
	fi
	break
	;;
      "Open Lazyman"*,* | *,"Open Lazyman"*)
        if [ "${USEGUI}" ]; then
          NVIM_APPNAME="nvim-Lazyman" neovide
        else
          NVIM_APPNAME="nvim-Lazyman" nvim
        fi
        break
        ;;
      "Select and Open"*,* | *,"Select and Open"* | "open",* | *,"open" | "Open",* | *,"Open")
        tput reset
        if [ "${USEGUI}" ]; then
          neovides
        else
          nvims
        fi
        break
        ;;
      "Select and Remove"*,* | *,"Select and Remove"* | "remove",* | *,"remove" | "Remove",* | *,"Remove")
        if [ "${USEGUI}" ]; then
          neovides -R
        else
          nvims -R
        fi
        break
        ;;
      "Remove Category"*,* | *,"Remove Category"*)
        choices=()
        [ "${base_partial}" ] && choices+=("Remove Base")
        [ "${lang_partial}" ] && choices+=("Remove Languages")
        [ "${prsnl_partial}" ] && choices+=("Remove Personals")
        [ "${start_partial}" ] && choices+=("Remove Starters")
        [ "${astro_partial}" ] && choices+=("Remove AstroNvims")
        [ "${lunar_partial}" ] && choices+=("Remove LunarVims")
        [ "${lzyvm_partial}" ] && choices+=("Remove LazyVims")
        [ "${nvchd_partial}" ] && choices+=("Remove NvChads")
        numndirs=${#ndirs[@]}
        [ ${numndirs} -gt 1 ] && {
          choices+=("Remove All")
        }
        choice=$(printf "%s\n" "${choices[@]}" | fzf --prompt=" Select configuration category to remove  " --layout=reverse --border --exit-0)
        if [[ " ${choices[*]} " =~ " ${choice} " ]]; then
          case "${choice}" in
            "Remove Base")
              printf "\nRemoving all Lazyman 'Base' Neovim configurations\n"
              lazyman -R -B -y
              ;;
            "Remove Languages")
              printf "\nRemoving all Lazyman 'Language' Neovim configurations\n"
              lazyman -R -L all -y
              ;;
            "Remove Personals")
              printf "\nRemoving all Lazyman 'Personal' Neovim configurations\n"
              lazyman -R -W -y
              ;;
            "Remove Starters")
              printf "\nRemoving all Lazyman 'Starter' Neovim configurations\n"
              lazyman -R -X -y
              ;;
            "Remove AstroNvims")
              printf "\nRemoving all Lazyman 'AstroNvim' Neovim configurations\n"
              lazyman -R -i astronvim -y
              ;;
            "Remove NvChads")
              printf "\nRemoving all Lazyman 'NvChad' Neovim configurations\n"
              lazyman -R -i nvchad -y
              ;;
            "Remove LazyVims")
              printf "\nRemoving all Lazyman 'LazyVim' Neovim configurations\n"
              lazyman -R -i lazyvim -y
              ;;
            "Remove LunarVims")
              printf "\nRemoving all Lazyman 'LunarVim' Neovim configurations\n"
              lazyman -R -i lunarvim -y
              ;;
            "Remove All")
              printf "\nRemoving all Lazyman Neovim configurations\n"
              for ndirm in "${ndirs[@]}"; do
                [ "${ndirm}" == "${LAZYMAN}" ] && continue
                [ "${ndirm}" == "nvim" ] && continue
                lazyman -R -N ${ndirm} -y
              done
              ;;
          esac
        fi
        break
        ;;
      "Update Category"*,* | *,"Update Category"*)
        choices=()
        [ "${base_partial}" ] && choices+=("Update Base")
        [ "${lang_partial}" ] && choices+=("Update Languages")
        [ "${prsnl_partial}" ] && choices+=("Update Personals")
        [ "${start_partial}" ] && choices+=("Update Starters")
        [ "${astro_partial}" ] && choices+=("Update AstroNvims")
        [ "${lunar_partial}" ] && choices+=("Update LunarVims")
        [ "${lzyvm_partial}" ] && choices+=("Update LazyVims")
        [ "${nvchd_partial}" ] && choices+=("Update NvChads")
        numndirs=${#ndirs[@]}
        [ ${numndirs} -gt 1 ] && {
          choices+=("Update All")
        }
        choice=$(printf "%s\n" "${choices[@]}" | fzf --prompt=" Select configuration category to update  " --layout=reverse --border --exit-0)
        if [[ " ${choices[*]} " =~ " ${choice} " ]]; then
          case "${choice}" in
            "Update Base")
              printf "\nUpdating all Lazyman 'Base' Neovim configurations\n"
              lazyman ${darg} -B -y -z -Q -q -U
              ;;
            "Update Languages")
              lazyman ${darg} -L all -y -z -Q -q -U
              ;;
            "Update Personals")
              lazyman ${darg} -W -y -z -Q -q -U
              ;;
            "Update Starters")
              lazyman ${darg} -X -y -z -Q -q -U
              ;;
            "Update AstroNvims")
              lazyman ${darg} -i astronvim -y -z -Q -q -U
              ;;
            "Update NvChads")
              lazyman ${darg} -i nvchad -y -z -Q -q -U
              ;;
            "Update LazyVims")
              lazyman ${darg} -i lazyvim -y -z -Q -q -U
              ;;
            "Update LunarVims")
              lazyman ${darg} -i lunarvim -y -z -Q -q -U
              ;;
            "Update All")
              printf "\nUpdating all Lazyman Neovim configurations\n"
              printf "\nUpdating all Lazyman 'Base' Neovim configurations\n"
              lazyman ${darg} -B -y -z -Q -q -U
              lazyman ${darg} -L all -y -z -Q -q -U
              lazyman ${darg} -W -y -z -Q -q -U
              lazyman ${darg} -X -y -z -Q -q -U
              ;;
          esac
        fi
        break
        ;;
      "Install Base"*,* | *,"Install Base"*)
        printf "\n\nInstalling all Lazyman 'Base' Neovim configurations\n"
        lazyman ${darg} -B -y -z -q -Q
        break
        ;;
      "Install Language"*,* | *,"Install Language"*)
        lazyman ${darg} -L all -y -z -Q -q
        break
        ;;
      "Install Personal"*,* | *,"Install Personal"*)
        lazyman ${darg} -W -y -z -Q -q
        break
        ;;
      "Install Starter"*,* | *,"Install Starter"*)
        lazyman ${darg} -X -y -z -Q -q
        break
        ;;
      "Install AstroNvims"*,* | *,"Install AstroNvims"*)
        lazyman ${darg} -i astronvim -y -z -Q -q
        break
        ;;
      "Install NvChad"*,* | *,"Install NvChad"*)
        lazyman ${darg} -i nvchad -y -z -Q -q
        break
        ;;
      "Install LazyVim"*,* | *,"Install LazyVim"*)
        lazyman ${darg} -i lazyvim -y -z -Q -q
        break
        ;;
      "Install LunarVim"*,* | *,"Install LunarVim"*)
        lazyman ${darg} -i lunarvim -y -z -Q -q
        break
        ;;
      "Install All"*,* | *,"Install All"*)
        install_all
        break
        ;;
      "Neovim Ver"*,* | *,"Neovim Ver"*)
        versmenu=1
        break
        ;;
      " What is Bob"*,* | *," What is Bob"*)
        printf "\nBob is an easy to use cross-platform Neovim version manager,"
        printf "\nallowing switching between Neovim versions from the command line.\n"
        printf "\nFor example, with Bob you could open a Neovim configuration with"
        printf "\nthe latest stable release of Neovim and then quickly and easily"
        printf "\nreopen that same configuration using the nightly Neovim build.\n"
        printf "\nThe Bob Neovim version manager can install and manage multiple"
        printf "\nNeovim versions from the command line and has been integrated"
        printf "\ninto Lazyman via the Lazyman Menu interface for ease of use.\n"
        printf "\nSee https://github.com/MordechaiHadad/bob for more info on Bob.\n"
        prompt_continue
        break
        ;;
      "Install Bob"*,* | *,"Install Bob"*)
        install_bob
        prompt_continue
        break
        ;;
      "Initialize Lazyman"*,* | *,"Initialize Lazyman"*)
        [ -x "${INSTNVIM}" ] && {
          "${INSTNVIM}" $darg $head $brew $yes
        }
        lazyman ${darg} init
        set_haves
        break
        ;;
      "Install Tools"*,* | *,"Install Tools"*)
        lazyman ${darg} -I
        set_haves
        break
        ;;
      "Install Neovide"*,* | *,"Install Neovide"*)
        [ -x "${SCRIPTSD}/install_neovide.sh" ] && {
          "${SCRIPTSD}/install_neovide.sh"
        }
        have_neovide=$(type -p neovide)
        [ -f "${LZYMANRC}" ] && {
          source "${LZYMANRC}"
        }
        break
        ;;
      "Open Neovide"*,* | *,"Open Neovide"*)
        NVIM_APPNAME="${LAZYMAN}" neovide
        break
        ;;
      "Open "*,* | *,"Open "*)
        if [ "${opt}" ]; then
          nvimconf=$(echo ${opt} | awk ' { print $2 } ')
        else
          nvimconf=$(echo ${REPLY} | awk ' { print $2 } ')
        fi
        if [ -d "${HOME}/.config/nvim-${nvimconf}" ]; then
          if [ "${USEGUI}" ]; then
            runconfig "nvim-${nvimconf}" "neovide"
          else
            runconfig "nvim-${nvimconf}"
          fi
        else
          if [ -d "${HOME}/.config/${nvimconf}" ]; then
            if [ "${USEGUI}" ]; then
              runconfig "nvim-${nvimconf}" "neovide"
            else
              runconfig "nvim-${nvimconf}"
            fi
          else
            printf "\nCannot locate ${nvimconf} Neovim configuration\n"
            prompt_continue
          fi
        fi
        break
        ;;
      "Hide List"*,* | *,"Hide List"*)
        showinstalled=0
        break
        ;;
      "Show List"*,* | *,"Show List"*)
        showinstalled=2
        break
        ;;
      "Debug Mode"*,* | *,"Debug Mode"*)
        if [ "${debug}" ]; then
          debug=
          darg=
        else
          debug=1
          darg="-d"
        fi
        break
        ;;
      "Toggle"*,* | *,"Toggle"*)
        if [ "${USEGUI}" ]; then
          USEGUI=
        else
          USEGUI=1
        fi
        break
        ;;
      "Config Info",* | *,"Config Info" | "info",* | *,"info" | "Info",* | *,"Info")
        show_info select
        break
        ;;
      "Plugin Search",* | *,"Plugin Search" | "search"*,* | *,"search"* | "Search"*,* | *,"Search"*)
        select_search noexit
        break
        ;;
      "Health Check",* | *,"Health Check")
        choices=()
        items=()
        [ -f "${LZYMANRC}" ] && {
          source "${LZYMANRC}"
          readarray -t choices < <(printf '%s\0' "${items[@]}" | sort -z | xargs -0n1)
        }
        choice=$(printf "%s\n" "${choices[@]}" | fzf --prompt=" Select Neovim Config for Health Check  " --layout=reverse --border --exit-0)
        if [[ " ${choices[*]} " =~ " ${choice} " ]]; then
          lazyman -N "nvim-${choice}" health
        fi
        break
        ;;
      "Kill All"*,* | *,"Kill All"*)
        ${KILLNVIM}
        break
        ;;
      "Lazyman Config",* | *,"Lazyman Config")
        confmenu=1
        break
        ;;
      "LazyIde Config",* | *,"LazyIde Config")
        lidemenu=1
        break
        ;;
      "Webdev Config",* | *,"Webdev Config")
        wdevmenu=1
        break
        ;;
      "Check for Updates",* | *,"Check for Updates")
        printf "\nChecking for available updates to Lazyman installed configs\n\n"
        if [ "${have_rich}" ]; then
          check_updates rich
        else
          check_updates
          printf "\n"
        fi
        prompt_continue
        break
        ;;
      "Status Report",* | *,"Status Report")
        printf "\nPreparing Lazyman status report\n"
        show_status >/tmp/lminfo$$
        if [ "${USEGUI}" ]; then
          NVIM_APPNAME="${LAZYMAN}" neovide /tmp/lminfo$$
        else
          NVIM_APPNAME="${LAZYMAN}" nvim /tmp/lminfo$$
        fi
        rm -f /tmp/lminfo$$
        break
        ;;
      "Homebrew Upgrade",* | *,"Homebrew Upgrade")
        printf "Upgrading Homebrew packages with 'brew upgrade' ..."
        brew update --quiet >/dev/null 2>&1
        brew upgrade --quiet >/dev/null 2>&1
        printf " done"
        break
        ;;
      "Quit"*,* | *,"Quit"* | "quit"*,* | *,"quit"*)
        printf "\nExiting Lazyman\n"
        exit 0
        ;;
      *,*)
        printf "\nCould not match '${REPLY}' with a menu entry."
        printf "\nPlease try again with an exact match.\n"
        break
        ;;
      esac
      REPLY=
    done
    [ "${confmenu}" ] && {
      ${SUBMENUS} -m conf
      [ $? -eq 3 ] && exit 0
    }
    [ "${lidemenu}" ] && {
      ${LZYIDE}
      [ $? -eq 3 ] && exit 0
    }
    [ "${wdevmenu}" ] && {
      ${WEBDEV}
      [ $? -eq 3 ] && exit 0
    }
    [ "${versmenu}" ] && show_vers_menu
  done
  [ "${help}" ] && show_main_menu
}

show_main_menu
